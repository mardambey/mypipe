mypipe {
  group-mutations-by-tx = true
  #include-row-data = false

  # consumers represent sources for mysql binary logs
  consumers {

    bigmaven {
      # database "host:port:user:pass" array
      source = "127.0.0.1:3306:root:password"
    }

  }

  # data producers export data out (stdout, other stores, external services, etc.)
  producers {

    stdout {
       class = "mypipe.producer.StdoutProducer"
    }

    event-producer {
       class = "mypipe.producer.EventProducer"
    }
  }

  # pipes join consumers and producers
  pipes {

    sqs {
      consumers = ["bigmaven"]
      producer {
        event-producer {
          queue-provider = "sqs"
          sqs-queue = "MacBook-Pro-firehose"
        }
      }
    }

    redis {
      consumers = ["bigmaven"]
      producer {
        event-producer {
          queue-provider = "redis"
          redis-connect = "localhost"
        }
      }
    }
  }

  error {
    # error handler class, the default config based handler uses the
    # flags below to control it's behaviour
    handler.default.class = "mypipe.mysql.ConfigBasedErrorHandler"

    # whether or not to stop processing the binary log
    # on event handler failure
    quit-on-event-handler-failure = true

    # whether or not to stop processing the binary log
    # if mypipe fails to decode an event
    quit-on-event-decode-failure = true

    # whether or not to stop processing the binary log
    # on consumer listener failure
    quit-on-listener-failure = true

    # whether or not to quit upon encountering a commit
    # that does not contain mutation events
    # the commit might contain query events and this
    # error handler can be overridden for custom behaviour
    quit-on-empty-mutation-commit-failure = true
  }

  # prefix to use when generating mysql server ids
  mysql-server-id-prefix = 9000
}

akka {
  log-dead-letters-during-shutdown = off
}

include "application.overrides"
